{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar buttonToPlay = document.querySelector(\".button\");\nvar startMessage = document.querySelector(\".message-start\");\nvar winMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar scoreCounter = document.querySelector(\".game-score\");\nvar tableRows = document.querySelector(\"tbody\").rows;\nvar fieldCells = document.querySelectorAll(\"td\");\nvar matrix = createMatrix();\nvar score = 0;\nbuttonToPlay.addEventListener(\"click\", function() {\n    startMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    score = 0;\n    if (buttonToPlay.classList.contains(\"start\")) {\n        spawnStartNumber();\n        buttonToPlay.classList.remove(\"start\");\n        buttonToPlay.classList.add(\"restart\");\n        buttonToPlay.innerHTML = \"Restart\";\n    }\n    if (buttonToPlay.classList.contains(\"restart\")) {\n        iterateMatrix(function(element) {\n            return restoreCell(element);\n        });\n        spawnStartNumber();\n    }\n});\ncallMove();\nfunction gameResult() {\n    iterateMatrix(function(element) {\n        if (parseInt(element.innerHTML) === 2048) winMessage.classList.remove(\"hidden\");\n    });\n    if (!gameLost()) loseMessage.classList.remove(\"hidden\");\n}\nfunction createMatrix() {\n    var rowIndex = 0;\n    var colIndex = 0;\n    var cols = 4;\n    var array = [];\n    for(var i = 0; i < fieldCells.length; i++){\n        if (!array[rowIndex]) array[rowIndex] = [];\n        array[rowIndex].push(fieldCells[i]);\n        colIndex++;\n        if (colIndex === cols) {\n            rowIndex++;\n            colIndex = 0;\n        }\n    }\n    return array;\n}\nfunction spawnStartNumber() {\n    for(var i = 0; i < 2; i++)spawnNewNumber(2);\n    paintCell();\n}\nfunction spawnNewNumber() {\n    if (!checkForEmpty()) return;\n    var randomValue = Math.random() < 0.9 ? 2 : 4;\n    while(true){\n        var row = Math.floor(Math.random() * 4);\n        var col = Math.floor(Math.random() * 4);\n        if (matrix[row][col].innerHTML === \"\") {\n            matrix[row][col].innerHTML = randomValue;\n            break;\n        }\n        updateGame();\n    }\n}\nfunction paintCell() {\n    iterateMatrix(function(element) {\n        var cellValue = element.innerHTML;\n        if (cellValue !== \"\") element.classList = \"field-cell field-cell--\".concat(cellValue);\n        else element.classList = \"field-cell\";\n    });\n}\nfunction compareCells(element1, element2) {\n    for(var num = 2; num <= 2048; num *= 2){\n        if (parseInt(element1.innerHTML) === num && parseInt(element2.innerHTML) === num) return true;\n    }\n}\nfunction restoreCell(arrElement) {\n    arrElement.innerHTML = \"\";\n    arrElement.classList.remove(\"field-cell--\".concat(arrElement.innerHTML));\n}\nfunction iterateMatrix(callback) {\n    for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++)callback(matrix[i][j]);\n}\nfunction updateCell(cell, num) {\n    cell.innerText = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (num > 0) {\n        cell.innerText = num.toString();\n        cell.classList.add(\"field-cell--\".concat(num.toString()));\n    }\n}\nfunction updateGame() {\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n        var currentCell = tableRows[r].cells[c];\n        var num = parseInt(matrix[r][c].innerHTML);\n        updateCell(currentCell, num);\n    }\n    scoreCounter.innerText = score.toString();\n}\nfunction callMove() {\n    document.addEventListener(\"keydown\", function(e) {\n        if (e.key === \"ArrowUp\") moveUp();\n        if (e.key === \"ArrowDown\") moveDown();\n        if (e.key === \"ArrowRight\") moveRight();\n        if (e.key === \"ArrowLeft\") moveLeft();\n        gameResult();\n        scoreCounter.innerText = score.toString();\n        paintCell();\n    });\n}\nfunction moveRight() {\n    var pastValues = createMatrixValueCopy();\n    for(var i = 0; i < matrix.length; i++){\n        var merged = false;\n        for(var j = matrix[i].length - 2; j >= 0; j--)if (matrix[i][j].innerHTML !== \"\") {\n            var k = j + 1;\n            while(k < matrix[i].length && matrix[i][k].innerHTML === \"\"){\n                matrix[i][k].innerHTML = matrix[i][k - 1].innerHTML;\n                restoreCell(matrix[i][k - 1]);\n                k++;\n            }\n            while(k < matrix[i].length){\n                if (!merged && compareCells(matrix[i][k], matrix[i][k - 1])) {\n                    matrix[i][k].innerHTML = \"\".concat(parseInt(matrix[i][k].innerHTML) * 2);\n                    matrix[i][k - 1].innerHTML = \"\";\n                    restoreCell(matrix[i][k - 1]);\n                    score += parseInt(matrix[i][k].innerHTML);\n                    merged = true;\n                } else merged = false;\n                k++;\n            }\n        }\n    }\n    var newValues = createMatrixValueCopy();\n    if (isChanged(pastValues, newValues)) spawnNewNumber();\n    updateGame();\n}\nfunction moveLeft() {\n    var pastValues = createMatrixValueCopy();\n    for(var i = 0; i < matrix.length; i++){\n        var merged = false;\n        for(var j = 1; j < matrix[i].length; j++)if (matrix[i][j].innerHTML !== \"\") {\n            var k = j - 1;\n            while(k >= 0 && matrix[i][k].innerHTML === \"\"){\n                matrix[i][k].innerHTML = matrix[i][k + 1].innerHTML;\n                restoreCell(matrix[i][k + 1]);\n                k--;\n            }\n            while(k >= 0){\n                if (!merged && compareCells(matrix[i][k], matrix[i][k + 1])) {\n                    matrix[i][k].innerHTML = \"\".concat(parseInt(matrix[i][k].innerHTML) * 2);\n                    matrix[i][k + 1].innerHTML = \"\";\n                    restoreCell(matrix[i][k + 1]);\n                    score += parseInt(matrix[i][k].innerHTML);\n                    merged = true;\n                } else merged = false;\n                k--;\n            }\n        }\n    }\n    var newValues = createMatrixValueCopy();\n    if (isChanged(pastValues, newValues)) spawnNewNumber();\n    updateGame();\n}\nfunction moveUp() {\n    var pastValues = createMatrixValueCopy();\n    for(var j = 0; j < matrix[0].length; j++){\n        var merged = false;\n        for(var i = 1; i < matrix.length; i++)if (matrix[i][j].innerHTML !== \"\") {\n            var k = i - 1;\n            while(k >= 0 && matrix[k][j].innerHTML === \"\"){\n                matrix[k][j].innerHTML = matrix[k + 1][j].innerHTML;\n                restoreCell(matrix[k + 1][j]);\n                k--;\n            }\n            while(k >= 0){\n                if (!merged && compareCells(matrix[k][j], matrix[k + 1][j])) {\n                    matrix[k][j].innerHTML = \"\".concat(parseInt(matrix[k][j].innerHTML) * 2);\n                    matrix[k + 1][j].innerHTML = \"\";\n                    restoreCell(matrix[k + 1][j]);\n                    score += parseInt(matrix[k][j].innerHTML);\n                    merged = true;\n                } else merged = false;\n                k--;\n            }\n        }\n    }\n    var newValues = createMatrixValueCopy();\n    if (isChanged(pastValues, newValues)) spawnNewNumber();\n    updateGame();\n}\nfunction moveDown() {\n    var pastValues = createMatrixValueCopy();\n    for(var j = 0; j < matrix[0].length; j++){\n        var merged = false;\n        for(var i = matrix.length - 2; i >= 0; i--)if (matrix[i][j].innerHTML !== \"\") {\n            var k = i + 1;\n            while(k < matrix.length && matrix[k][j].innerHTML === \"\"){\n                matrix[k][j].innerHTML = matrix[k - 1][j].innerHTML;\n                restoreCell(matrix[k - 1][j]);\n                k++;\n            }\n            while(k < matrix.length){\n                if (!merged && compareCells(matrix[k][j], matrix[k - 1][j])) {\n                    matrix[k][j].innerHTML = \"\".concat(parseInt(matrix[k][j].innerHTML) * 2);\n                    matrix[k - 1][j].innerHTML = \"\";\n                    restoreCell(matrix[k - 1][j]);\n                    score += parseInt(matrix[k][j].innerHTML);\n                    merged = true;\n                } else merged = false;\n                k++;\n            }\n        }\n    }\n    var newValues = createMatrixValueCopy();\n    if (isChanged(pastValues, newValues)) spawnNewNumber();\n    updateGame();\n}\nfunction isChanged(matrixA, matrixB) {\n    for(var i = 0; i < matrixA.length; i++)for(var j = 0; j < matrixA[i].length; j++){\n        if (matrixA[i][j] !== matrixB[i][j]) return true;\n    }\n    return false;\n}\nfunction createMatrixValueCopy() {\n    var matrixValueCopy = Array(matrix.length).fill(null).map(function() {\n        return Array(matrix[0].length);\n    });\n    for(var i = 0; i < matrix.length; i++)for(var j = 0; j < matrix[i].length; j++)matrixValueCopy[i][j] = matrix[i][j].innerHTML;\n    return matrixValueCopy;\n}\nfunction gameLost() {\n    var copyMatrixValue = createMatrixValueCopy();\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n        if (r < 3 && copyMatrixValue[r][c] === copyMatrixValue[r + 1][c]) return true;\n        if (c < 3 && copyMatrixValue[r][c] === copyMatrixValue[r][c + 1]) return true;\n    }\n    if (!checkForEmpty()) return false;\n    return true;\n}\nfunction checkForEmpty() {\n    var newValues = createMatrixValueCopy();\n    for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n        if (newValues[r][c] === \"\") return true;\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.34335ce4.js.map\n","'use strict';\n\nconst buttonToPlay = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst scoreCounter = document.querySelector('.game-score');\n\nconst tableRows = document.querySelector('tbody').rows;\n\nconst fieldCells = document.querySelectorAll('td');\n\nconst matrix = createMatrix();\nlet score = 0;\n\nbuttonToPlay.addEventListener('click', () => {\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  score = 0;\n\n  if (buttonToPlay.classList.contains('start')) {\n    spawnStartNumber();\n    buttonToPlay.classList.remove('start');\n    buttonToPlay.classList.add('restart');\n    buttonToPlay.innerHTML = 'Restart';\n  }\n\n  if (buttonToPlay.classList.contains('restart')) {\n    iterateMatrix(element => restoreCell(element));\n    spawnStartNumber();\n  }\n});\n\ncallMove();\n\nfunction gameResult() {\n  iterateMatrix((element) => {\n    if (parseInt(element.innerHTML) === 2048) {\n      winMessage.classList.remove('hidden');\n    }\n  });\n\n  if (!gameLost()) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction createMatrix() {\n  let rowIndex = 0;\n  let colIndex = 0;\n\n  const cols = 4;\n  const array = [];\n\n  for (let i = 0; i < fieldCells.length; i++) {\n    if (!array[rowIndex]) {\n      array[rowIndex] = [];\n    }\n\n    array[rowIndex].push(fieldCells[i]);\n\n    colIndex++;\n\n    if (colIndex === cols) {\n      rowIndex++;\n      colIndex = 0;\n    }\n  }\n\n  return array;\n}\n\nfunction spawnStartNumber() {\n  for (let i = 0; i < 2; i++) {\n    spawnNewNumber(2);\n  }\n\n  paintCell();\n}\n\nfunction spawnNewNumber() {\n  if (!checkForEmpty()) {\n    return;\n  }\n\n  const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n  while (true) {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (matrix[row][col].innerHTML === '') {\n      matrix[row][col].innerHTML = randomValue;\n      break;\n    }\n\n    updateGame();\n  }\n}\n\nfunction paintCell() {\n  iterateMatrix((element) => {\n    const cellValue = element.innerHTML;\n\n    if (cellValue !== '') {\n      element.classList = `field-cell field-cell--${cellValue}`;\n    } else {\n      element.classList = 'field-cell';\n    }\n  });\n}\n\nfunction compareCells(element1, element2) {\n  for (let num = 2; num <= 2048; num *= 2) {\n    if (parseInt(element1.innerHTML) === num\n    && parseInt(element2.innerHTML) === num) {\n      return true;\n    }\n  }\n}\n\nfunction restoreCell(arrElement) {\n  arrElement.innerHTML = '';\n  arrElement.classList.remove(`field-cell--${arrElement.innerHTML}`);\n}\n\nfunction iterateMatrix(callback) {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      callback(matrix[i][j]);\n    }\n  }\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num.toString()}`);\n  }\n}\n\nfunction updateGame() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      const currentCell = tableRows[r].cells[c];\n      const num = parseInt(matrix[r][c].innerHTML);\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreCounter.innerText = score.toString();\n}\n\nfunction callMove() {\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'ArrowUp') {\n      moveUp();\n    }\n\n    if (e.key === 'ArrowDown') {\n      moveDown();\n    }\n\n    if (e.key === 'ArrowRight') {\n      moveRight();\n    }\n\n    if (e.key === 'ArrowLeft') {\n      moveLeft();\n    }\n\n    gameResult();\n\n    scoreCounter.innerText = score.toString();\n\n    paintCell();\n  });\n}\n\nfunction moveRight() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let i = 0; i < matrix.length; i++) {\n    let merged = false;\n\n    for (let j = matrix[i].length - 2; j >= 0; j--) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = j + 1;\n\n        while (k < matrix[i].length && matrix[i][k].innerHTML === '') {\n          matrix[i][k].innerHTML = matrix[i][k - 1].innerHTML;\n          restoreCell(matrix[i][k - 1]);\n          k++;\n        }\n\n        while (k < matrix[i].length) {\n          if (!merged && compareCells(matrix[i][k], matrix[i][k - 1])) {\n            matrix[i][k].innerHTML = `${parseInt(matrix[i][k].innerHTML) * 2}`;\n            matrix[i][k - 1].innerHTML = '';\n            restoreCell(matrix[i][k - 1]);\n\n            score += parseInt(matrix[i][k].innerHTML);\n\n            merged = true;\n          } else {\n            merged = false;\n          }\n          k++;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveLeft() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let i = 0; i < matrix.length; i++) {\n    let merged = false;\n\n    for (let j = 1; j < matrix[i].length; j++) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = j - 1;\n\n        while (k >= 0 && matrix[i][k].innerHTML === '') {\n          matrix[i][k].innerHTML = matrix[i][k + 1].innerHTML;\n          restoreCell(matrix[i][k + 1]);\n          k--;\n        }\n\n        while (k >= 0) {\n          if (!merged && compareCells(matrix[i][k], matrix[i][k + 1])) {\n            matrix[i][k].innerHTML = `${parseInt(matrix[i][k].innerHTML) * 2}`;\n            matrix[i][k + 1].innerHTML = '';\n            restoreCell(matrix[i][k + 1]);\n\n            score += parseInt(matrix[i][k].innerHTML);\n\n            merged = true;\n          } else {\n            merged = false;\n          }\n          k--;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveUp() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let j = 0; j < matrix[0].length; j++) {\n    let merged = false;\n\n    for (let i = 1; i < matrix.length; i++) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = i - 1;\n\n        while (k >= 0 && matrix[k][j].innerHTML === '') {\n          matrix[k][j].innerHTML = matrix[k + 1][j].innerHTML;\n          restoreCell(matrix[k + 1][j]);\n          k--;\n        }\n\n        while (k >= 0) {\n          if (!merged && compareCells(matrix[k][j], matrix[k + 1][j])) {\n            matrix[k][j].innerHTML = `${parseInt(matrix[k][j].innerHTML) * 2}`;\n            matrix[k + 1][j].innerHTML = '';\n            restoreCell(matrix[k + 1][j]);\n\n            score += parseInt(matrix[k][j].innerHTML);\n\n            merged = true;\n          } else {\n            merged = false;\n          }\n          k--;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveDown() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let j = 0; j < matrix[0].length; j++) {\n    let merged = false;\n\n    for (let i = matrix.length - 2; i >= 0; i--) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = i + 1;\n\n        while (k < matrix.length && matrix[k][j].innerHTML === '') {\n          matrix[k][j].innerHTML = matrix[k - 1][j].innerHTML;\n          restoreCell(matrix[k - 1][j]);\n          k++;\n        }\n\n        while (k < matrix.length) {\n          if (!merged && compareCells(matrix[k][j], matrix[k - 1][j])) {\n            matrix[k][j].innerHTML = `${parseInt(matrix[k][j].innerHTML) * 2}`;\n            matrix[k - 1][j].innerHTML = '';\n            restoreCell(matrix[k - 1][j]);\n\n            score += parseInt(matrix[k][j].innerHTML);\n\n            merged = true;\n          } else {\n            merged = false;\n          }\n          k++;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction isChanged(matrixA, matrixB) {\n  for (let i = 0; i < matrixA.length; i++) {\n    for (let j = 0; j < matrixA[i].length; j++) {\n      if (matrixA[i][j] !== matrixB[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createMatrixValueCopy() {\n  const matrixValueCopy\n  = Array(matrix.length).fill(null).map(() => Array(matrix[0].length));\n\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      matrixValueCopy[i][j] = matrix[i][j].innerHTML;\n    }\n  }\n\n  return matrixValueCopy;\n}\n\nfunction gameLost() {\n  const copyMatrixValue = createMatrixValueCopy();\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (r < 3 && copyMatrixValue[r][c] === copyMatrixValue[r + 1][c]) {\n        return true;\n      }\n\n      if (c < 3 && copyMatrixValue[r][c] === copyMatrixValue[r][c + 1]) {\n        return true;\n      }\n    }\n  }\n\n  if (!checkForEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkForEmpty() {\n  const newValues = createMatrixValueCopy();\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (newValues[r][c] === '') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["buttonToPlay","document","querySelector","startMessage","winMessage","loseMessage","scoreCounter","tableRows","rows","fieldCells","querySelectorAll","matrix","createMatrix","rowIndex","colIndex","array","i","length","push","score","spawnStartNumber","spawnNewNumber","paintCell","checkForEmpty","randomValue","Math","random","row","floor","col","innerHTML","updateGame","iterateMatrix","element","cellValue","classList","concat","compareCells","element1","element2","num","parseInt","restoreCell","arrElement","remove","callback","j","r","c","currentCell","cells","cell","innerText","value","add","toString","isChanged","matrixA","matrixB","createMatrixValueCopy","matrixValueCopy","Array","fill","map","newValues","addEventListener","contains","e","key","moveUp","pastValues","merged","k","moveDown","moveRight","moveLeft","gameLost","copyMatrixValue"],"version":3,"file":"index.34335ce4.js.map"}